import os
import sys
import glob
import pandas as pd
from PySide6.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QPushButton, QHBoxLayout, QVBoxLayout, QFileDialog, QMessageBox,
    QSpacerItem, QSizePolicy, QMenuBar, QMenu, QTextEdit
)
from PySide6.QtGui import QAction, QIcon


# https://stackoverflow.com/questions/31836104/pyinstaller-and-onefile-how-to-include-an-image-in-the-exe-file
def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)


class CsvMerger(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("CSV Merger 1.0")
        self.setGeometry(100, 100, 500, 400)
        self.setWindowIcon(QIcon(resource_path("merge_icon.ico")))

        # Main Layout
        self.main_layout = QVBoxLayout()
        self.main_layout.setContentsMargins(10, 10, 10, 10)

        # Menu Bar
        self.menu_bar = QMenuBar(self)
        about_menu = QMenu("–î–æ–≤—ñ–¥–∫–∞", self)
        about_action = QAction("–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", self)
        about_action.triggered.connect(self.show_about_dialog)
        about_menu.addAction(about_action)
        self.menu_bar.addMenu(about_menu)
        self.main_layout.setMenuBar(self.menu_bar)

        # Set fixed width for labels
        label_width = 100

        # Input Folder Widgets
        self.input_folder_label = QLabel("–í—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞:")
        self.input_folder_label.setFixedWidth(label_width)
        self.input_folder_entry = QLineEdit()
        self.input_button = QPushButton("–û–±—Ä–∞—Ç–∏")
        self.input_button.clicked.connect(self.select_input_folder)

        # Input Folder Layout
        self.input_layout = QHBoxLayout()
        self.input_layout.setSpacing(5)
        self.input_layout.addWidget(self.input_folder_label)
        self.input_layout.addWidget(self.input_folder_entry)
        self.input_layout.addWidget(self.input_button)

        # Output Folder Widgets
        self.output_folder_label = QLabel("–í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞:")
        self.output_folder_label.setFixedWidth(label_width)
        self.output_folder_entry = QLineEdit()
        self.output_button = QPushButton("–û–±—Ä–∞—Ç–∏")
        self.output_button.clicked.connect(self.select_output_folder)

        # Output Folder Layout
        self.output_layout = QHBoxLayout()
        self.output_layout.setSpacing(5)
        self.output_layout.addWidget(self.output_folder_label)
        self.output_layout.addWidget(self.output_folder_entry)
        self.output_layout.addWidget(self.output_button)

        # Status Area
        self.status_text = QTextEdit()
        self.status_text.setReadOnly(True)
        self.status_text.setMinimumHeight(150)
        self.status_text.setPlaceholderText("–¢—É—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏–º–µ—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü—ñ–π...")

        # Merge Button
        self.merge_button = QPushButton("–û–±'—î–¥–Ω–∞—Ç–∏ —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏")
        self.merge_button.clicked.connect(self.merge_and_save)

        # Center the button
        self.button_layout = QHBoxLayout()
        self.button_layout.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))
        self.button_layout.addWidget(self.merge_button)
        self.button_layout.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))

        # Add widgets to main layout
        self.main_layout.addLayout(self.input_layout)
        self.main_layout.addLayout(self.output_layout)
        self.main_layout.addWidget(self.status_text)
        self.main_layout.addLayout(self.button_layout)

        # Set main layout
        self.setLayout(self.main_layout)

    def log_status(self, message):
        """Add message to Status Area"""
        self.status_text.append(message)
        self.status_text.verticalScrollBar().setValue(
            self.status_text.verticalScrollBar().maximum()
        )
        # Update interface
        QApplication.processEvents()

    @staticmethod
    def check_folder_empty(folder_path):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–∞–ø–∫–∞ —ñ—Å–Ω—É—î —ñ —á–∏ –º—ñ—Å—Ç–∏—Ç—å CSV —Ñ–∞–π–ª–∏"""
        if not os.path.exists(folder_path):
            return False, "–ü–∞–ø–∫–∞ –Ω–µ —ñ—Å–Ω—É—î"

        if not os.path.isdir(folder_path):
            return False, "–í–∫–∞–∑–∞–Ω–∏–π —à–ª—è—Ö –Ω–µ —î –ø–∞–ø–∫–æ—é"

        csv_files = glob.glob(os.path.join(folder_path, '*.csv'))
        if not csv_files:
            return False, "–£ –ø–∞–ø—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ CSV —Ñ–∞–π–ª–∏"

        return True, f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(csv_files)} CSV —Ñ–∞–π–ª—ñ–≤"

    def select_input_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ CSV —Ñ–∞–π–ª–∞–º–∏")
        if folder:
            is_valid, message = self.check_folder_empty(folder)
            if is_valid:
                self.input_folder_entry.setText(folder)
                self.log_status(f"–û–±—Ä–∞–Ω–æ –≤—Ö—ñ–¥–Ω—É –ø–∞–ø–∫—É: {folder}")
                self.log_status(message)
            else:
                self.log_status(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≤—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏: {message}")
                QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è",
                                    f"–û–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å: {message}\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø–∞–ø–∫—É.")
                self.input_folder_entry.clear()

    def select_output_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
        if folder:
            if os.path.exists(folder) and os.path.isdir(folder):
                self.output_folder_entry.setText(folder)
                self.log_status(f"–û–±—Ä–∞–Ω–æ –≤–∏—Ö—ñ–¥–Ω—É –ø–∞–ø–∫—É: {folder}")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å
                test_file_path = os.path.join(folder, 'test_write_permission.tmp')
                try:
                    with open(test_file_path, 'w') as f:
                        f.write('')
                    os.remove(test_file_path)
                except Exception:
                    self.log_status("‚ùå –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å —É –≤–∏—Ö—ñ–¥–Ω—É –ø–∞–ø–∫—É")
                    QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è",
                                        "–í—ñ–¥—Å—É—Ç–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å —É –≤–∏–±—Ä–∞–Ω—É –ø–∞–ø–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø–∞–ø–∫—É.")
                    self.output_folder_entry.clear()
            else:
                self.log_status("‚ùå –ü–æ–º–∏–ª–∫–∞: –æ–±—Ä–∞–Ω–∏–π —à–ª—è—Ö –Ω–µ —î –ø–∞–ø–∫–æ—é")
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞",
                                    "–û–±—Ä–∞–Ω–∏–π —à–ª—è—Ö –Ω–µ —î –ø–∞–ø–∫–æ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –ø–∞–ø–∫—É.")
                self.output_folder_entry.clear()

    def merge_and_save(self):
        input_folder = self.input_folder_entry.text()
        output_folder = self.output_folder_entry.text()

        if not input_folder or not output_folder:
            self.log_status("‚ùå –ü–æ–º–∏–ª–∫–∞: –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–∏–¥–≤—ñ –ø–∞–ø–∫–∏.")
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–∏–¥–≤—ñ –ø–∞–ø–∫–∏.")
            return

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ –æ–±'—î–¥–Ω–∞–Ω–Ω—è–º
        is_valid, message = self.check_folder_empty(input_folder)
        if not is_valid:
            self.log_status(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {message}")
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", message)
            return

        try:
            self.log_status("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±'—î–¥–Ω–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...")
            self.merge_csv(input_folder, output_folder)
            self.log_status("‚úÖ –§–∞–π–ª–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±'—î–¥–Ω–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!")
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–§–∞–π–ª–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±'—î–¥–Ω–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!")
        except Exception as e:
            error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
            self.log_status(error_message)
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", error_message)

    def merge_csv(self, input_folder, output_folder):
        csv_files = glob.glob(os.path.join(input_folder, '*.csv'))

        if not csv_files:
            raise FileNotFoundError("–£ –≤—Ö—ñ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ –Ω–µ–º–∞—î CSV —Ñ–∞–π–ª—ñ–≤.")

        self.log_status(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(csv_files)} CSV —Ñ–∞–π–ª—ñ–≤")

        dfs = []
        total_rows = 0
        for i, csv_file in enumerate(csv_files, 1):
            try:
                self.log_status(f"–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É {i}/{len(csv_files)}: {os.path.basename(csv_file)}")
                df = pd.read_csv(csv_file, encoding='cp1251', sep=';', quotechar='"', engine='python')
                total_rows += len(df)
                self.log_status(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(df)} —Ä—è–¥–∫—ñ–≤ –∑ —Ñ–∞–π–ª—É {os.path.basename(csv_file)}")
                dfs.append(df)
            except Exception as e:
                self.log_status(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É {os.path.basename(csv_file)}: {str(e)}")
                raise

        self.log_status("–û–±'—î–¥–Ω–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...")
        combined_df = pd.concat(dfs, ignore_index=True)

        output_file_path = os.path.join(output_folder, 'merged_output.csv')
        combined_df.to_csv(output_file_path, index=False, encoding='utf-8-sig', sep=';', quotechar='"')
        self.log_status(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–∞–π–ª: {output_file_path}")
        self.log_status(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±'—î–¥–Ω–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤: {total_rows}")

    def show_about_dialog(self):
        about_text = (
            "<b>CSV Merger 1.0</b><br><br>"
            "–ê–≤—Ç–æ—Ä: deveLabR<br>"
            "–õ—ñ—Ü–µ–Ω–∑—ñ—è: MIT<br>"
            "–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π: <a href='https://github.com/deveLabR/csvmerge'>GitHub</a><br>"
        )
        QMessageBox.about(self, "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", about_text)


if __name__ == "__main__":
    app = QApplication([])
    app.setWindowIcon(QIcon(resource_path("merge_icon.ico")))
    window = CsvMerger()
    window.show()
    app.exec()
